{"ast":null,"code":"import _toConsumableArray from \"/Users/apple/Documents/newProjects/FE2/NC-NEWS-MAH/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/apple/Documents/newProjects/FE2/NC-NEWS-MAH/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/apple/Documents/newProjects/FE2/NC-NEWS-MAH/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/apple/Documents/newProjects/FE2/NC-NEWS-MAH/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/apple/Documents/newProjects/FE2/NC-NEWS-MAH/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/apple/Documents/newProjects/FE2/NC-NEWS-MAH/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/apple/Documents/newProjects/FE2/NC-NEWS-MAH/src/components/Comments.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as api from '../api';\nimport CommentCard from './CommentCard';\n\nvar Comments =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Comments, _Component);\n\n  function Comments() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Comments);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Comments)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      comments: [],\n      body: \"\",\n      bodyEmpty: false\n    };\n\n    _this.fetchComments = function () {\n      api.getCommentsByArticleId(_this.props.id).then(function (comments) {\n        _this.setState({\n          comments: comments\n        });\n      });\n    };\n\n    _this.handleChange = function (e) {\n      _this.setState({\n        body: e.target.value\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.postComment();\n    };\n\n    _this.deleteComment = function (id) {\n      api.deleteCommentByCommentId(id).then(function (removedComment) {\n        var remainedComments = _this.state.comments.filter(function (comment) {\n          return comment._id !== removedComment._id;\n        });\n\n        _this.setState({\n          comments: remainedComments\n        });\n      });\n    };\n\n    _this.postComment = function () {\n      var body = _this.state.body;\n      if (!body) _this.setState({\n        bodyEmpty: true\n      });\n      api.postCommentByArticleId(_this.props.id, {\n        body: body,\n        created_by: _this.props.user._id\n      }).then(function (newcomment) {\n        _this.setState(function (state) {\n          state.body = \"\";\n          return {\n            comments: [newcomment].concat(_toConsumableArray(state.comments))\n          };\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Comments, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var bodyEmpty = this.state.bodyEmpty;\n      var comments = this.state.comments;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          textAlign: \"left\",\n          marginLeft: \"70px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, \"What do you think?\", \" \"), React.createElement(\"form\", {\n        action: \"\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"textInputs\",\n        name: \"\",\n        id: \"\",\n        cols: \"30\",\n        rows: \"10\",\n        style: {\n          width: \"876px\",\n          height: \"59px\"\n        },\n        placeholder: \"what do you think? ...\",\n        onChange: this.handleChange,\n        value: this.state.body,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }), bodyEmpty ? React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \" \\u274C can't post an empty comment \\u274C \") : \"\", React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"send\")), comments.map(function (comment) {\n        return React.createElement(CommentCard, {\n          key: comment._id,\n          user: _this2.props.user,\n          id: _this2.props.id,\n          comment: comment,\n          deleteComment: _this2.deleteComment,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        });\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchComments();\n    }\n  }]);\n\n  return Comments;\n}(Component);\n\nComments.propTypes = {\n  user: PropTypes.string,\n  id: PRop\n};\nexport default Comments;","map":{"version":3,"sources":["/Users/apple/Documents/newProjects/FE2/NC-NEWS-MAH/src/components/Comments.jsx"],"names":["React","Component","PropTypes","api","CommentCard","Comments","state","comments","body","bodyEmpty","fetchComments","getCommentsByArticleId","props","id","then","setState","handleChange","e","target","value","handleSubmit","preventDefault","postComment","deleteComment","deleteCommentByCommentId","removedComment","remainedComments","filter","comment","_id","postCommentByArticleId","created_by","user","newcomment","textAlign","marginLeft","width","height","map","propTypes","string","PRop"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,QAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;IAEMC,Q;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,IAAI,EAAE,EAFA;AAGNC,MAAAA,SAAS,EAAC;AAHJ,K;;UA2BRC,a,GAAgB,YAAM;AACpBP,MAAAA,GAAG,CAACQ,sBAAJ,CAA2B,MAAKC,KAAL,CAAWC,EAAtC,EACCC,IADD,CACM,UAAAP,QAAQ,EAAI;AAChB,cAAKQ,QAAL,CAAc;AACZR,UAAAA,QAAQ,EAARA;AADY,SAAd;AAGD,OALD;AAMD,K;;UACDS,Y,GAAe,UAAAC,CAAC,EAAI;AAClB,YAAKF,QAAL,CAAc;AAAEP,QAAAA,IAAI,EAAES,CAAC,CAACC,MAAF,CAASC;AAAjB,OAAd;AACD,K;;UACDC,Y,GAAe,UAAAH,CAAC,EAAI;AAClBA,MAAAA,CAAC,CAACI,cAAF;;AACA,YAAKC,WAAL;AACD,K;;UAEDC,a,GAAgB,UAACV,EAAD,EAAQ;AACtBV,MAAAA,GAAG,CAACqB,wBAAJ,CAA6BX,EAA7B,EACGC,IADH,CACQ,UAAAW,cAAc,EAAI;AACtB,YAAMC,gBAAgB,GAAG,MAAKpB,KAAL,CAAWC,QAAX,CACxBoB,MADwB,CACjB,UAAAC,OAAO;AAAA,iBAAIA,OAAO,CAACC,GAAR,KAAgBJ,cAAc,CAACI,GAAnC;AAAA,SADU,CAAzB;;AAEA,cAAKd,QAAL,CAAc;AACZR,UAAAA,QAAQ,EAAEmB;AADE,SAAd;AAID,OARH;AASD,K;;UAEDJ,W,GAAc,YAAM;AAAA,UACXd,IADW,GACH,MAAKF,KADF,CACXE,IADW;AAElB,UAAG,CAACA,IAAJ,EAAU,MAAKO,QAAL,CAAc;AAACN,QAAAA,SAAS,EAAC;AAAX,OAAd;AACVN,MAAAA,GAAG,CAAC2B,sBAAJ,CAA2B,MAAKlB,KAAL,CAAWC,EAAtC,EAA0C;AACtCL,QAAAA,IAAI,EAAJA,IADsC;AAEtCuB,QAAAA,UAAU,EAAE,MAAKnB,KAAL,CAAWoB,IAAX,CAAgBH;AAFU,OAA1C,EAIGf,IAJH,CAIQ,UAAAmB,UAAU,EAAI;AAClB,cAAKlB,QAAL,CAAc,UAAAT,KAAK,EAAI;AACrBA,UAAAA,KAAK,CAACE,IAAN,GAAW,EAAX;AACA,iBAAO;AAACD,YAAAA,QAAQ,GAAE0B,UAAF,4BAAiB3B,KAAK,CAACC,QAAvB;AAAT,WAAP;AACD,SAHD;AAID,OATH;AAUD,K;;;;;;;6BA/DQ;AAAA;;AAAA,UACAE,SADA,GACa,KAAKH,KADlB,CACAG,SADA;AAAA,UAECF,QAFD,GAEc,KAAKD,KAFnB,CAECC,QAFD;AAGP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH;AAAI,QAAA,KAAK,EAAE;AAAE2B,UAAAA,SAAS,EAAE,MAAb;AAAqBC,UAAAA,UAAU,EAAE;AAAjC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqB,GADrB,CADG,EAIH;AAAM,QAAA,MAAM,EAAC,EAAb;AAAgB,QAAA,QAAQ,EAAE,KAAKf,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAU,QAAA,SAAS,EAAC,YAApB;AAAiC,QAAA,IAAI,EAAC,EAAtC;AAAyC,QAAA,EAAE,EAAC,EAA5C;AAA+C,QAAA,IAAI,EAAC,IAApD;AAAyD,QAAA,IAAI,EAAC,IAA9D;AAAmE,QAAA,KAAK,EAAE;AAAEgB,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,MAAM,EAAE;AAA1B,SAA1E;AAA8G,QAAA,WAAW,EAAC,wBAA1H;AAAmJ,QAAA,QAAQ,EAAE,KAAKrB,YAAlK;AAAgL,QAAA,KAAK,EAAE,KAAKV,KAAL,CAAWE,IAAlM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,OAC6M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD7M,EAEGC,SAAS,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAH,GAAgD,EAF5D,EAGE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CAJG,EASFF,QAAQ,CAAC+B,GAAT,CAAa,UAAAV,OAAO,EAAI;AACvB,eAAO,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAEA,OAAO,CAACC,GAA1B;AAA+B,UAAA,IAAI,EAAE,MAAI,CAACjB,KAAL,CAAWoB,IAAhD;AAAsD,UAAA,EAAE,EAAE,MAAI,CAACpB,KAAL,CAAWC,EAArE;AAAyE,UAAA,OAAO,EAAEe,OAAlF;AAA2F,UAAA,aAAa,EAAE,MAAI,CAACL,aAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFA,CATE,CAAP;AAaD;;;wCAEmB;AAClB,WAAKb,aAAL;AACD;;;;EA1BoBT,S;;AAwEvBI,QAAQ,CAACkC,SAAT,GAAqB;AACrBP,EAAAA,IAAI,EAAC9B,SAAS,CAACsC,MADM;AAErB3B,EAAAA,EAAE,EAAC4B;AAFkB,CAArB;AAKA,eAAepC,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as api from '../api'\nimport CommentCard from './CommentCard';\n\nclass Comments extends Component {\n  state = {\n    comments: [],\n    body: \"\",\n    bodyEmpty:false\n  };\n  render() {\n    const {bodyEmpty} = this.state\n    const { comments } = this.state;\n    return <div>\n        <h3 style={{ textAlign: \"left\", marginLeft: \"70px\" }}>\n          What do you think?{\" \"}\n        </h3>\n        <form action=\"\" onSubmit={this.handleSubmit}>\n          <textarea className=\"textInputs\" name=\"\" id=\"\" cols=\"30\" rows=\"10\" style={{ width: \"876px\", height: \"59px\" }} placeholder=\"what do you think? ...\" onChange={this.handleChange} value={this.state.body} /> <br />\n          {bodyEmpty ? <h3> ❌ can't post an empty comment ❌ </h3> : \"\"}\n          <button type=\"submit\">send</button>\n        </form>\n        {comments.map(comment => {\n          return <CommentCard key={comment._id} user={this.props.user} id={this.props.id} comment={comment} deleteComment={this.deleteComment} />;\n        })}\n      </div>;\n  }\n\n  componentDidMount() {\n    this.fetchComments();\n  }\n\n  fetchComments = () => {\n    api.getCommentsByArticleId(this.props.id)\n    .then(comments => {\n      this.setState({\n        comments\n      });\n    });\n  };\n  handleChange = e => {\n    this.setState({ body: e.target.value });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.postComment();\n  };\n\n  deleteComment = (id) => {\n    api.deleteCommentByCommentId(id)\n      .then(removedComment => {\n        const remainedComments = this.state.comments\n        .filter(comment => comment._id !== removedComment._id);\n        this.setState({\n          comments: remainedComments\n        }\n        )\n      })\n  }\n\n  postComment = () => {\n    const {body} = this.state;\n    if(!body) this.setState({bodyEmpty:true});\n    api.postCommentByArticleId(this.props.id, {\n        body,\n        created_by: this.props.user._id\n      })\n      .then(newcomment => {\n        this.setState(state => {\n          state.body=\"\"\n          return {comments:[newcomment, ...state.comments]}\n        })\n      });\n  };\n}\n\nComments.propTypes = {\nuser:PropTypes.string,\nid:PRop\n};\n\nexport default Comments;"]},"metadata":{},"sourceType":"module"}